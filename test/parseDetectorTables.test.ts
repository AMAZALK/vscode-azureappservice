import * as assert from 'assert';
import { ColumnName, detectorResponseJSON, detectorTable } from "../src/checkLinuxWebAppDownDetector";
import { nonNullValue } from '../src/utils/nonNull';
import { findTableByColumnName, findTableByRowValue, getValuesByColumnName } from "../src/utils/tableUtil";

const detectorDataset: detectorResponseJSON = <detectorResponseJSON><unknown>{ id: "/subscriptions/9b5c7ccb-9857-4307-843b-8875e83f65e9/resourceGroups/appsvc_linux_centralus/providers/Microsoft.Web/sites/naturins-linux/detectors/LinuxContainerStartFailure", name: "LinuxContainerStartFailure", type: "Microsoft.Web/sites/detectors", location: "West US", properties: { metadata: { id: "LinuxContainerStartFailure", name: "Container Issues", category: "Availability and Performance", author: "", description: "Investigate potential reasons why your container failed to start, which could cause deployment and availability issues.", type: "Detector", supportTopicList: [], analysisTypes: null, score: 0.0, typeId: "Diagnostics.ModelsAndUtils.Attributes.Definition, Diagnostics.ModelsAndUtils, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" }, dataset: [{ table: { tableName: "", columns: [{ columnName: "Status", dataType: "String", columnType: null }, { columnName: "Message", dataType: "String", columnType: null }, { columnName: "Data.Name", dataType: "String", columnType: null }, { columnName: "Data.Value", dataType: "String", columnType: null }, { columnName: "Expanded", dataType: "String", columnType: null }, { columnName: "Solutions", dataType: "String", columnType: null }], rows: [["Info", "vscode", "", "", "False", "null"]] }, renderingProperties: { type: 7, title: null, description: null } }, { table: { tableName: "", columns: [{ columnName: "Status", dataType: "String", columnType: null }, { columnName: "Message", dataType: "String", columnType: null }, { columnName: "Data.Name", dataType: "String", columnType: null }, { columnName: "Data.Value", dataType: "String", columnType: null }, { columnName: "Expanded", dataType: "String", columnType: null }, { columnName: "Solutions", dataType: "String", columnType: null }], rows: [["Info", "Latest time seen by detector. To be used in VSCode integration.", "Most recent time seen by the detector", "7/26/2019 8:40:00 PM UTC ", "False", "null"]] }, renderingProperties: { type: 7, title: null, description: null } }, { table: { tableName: "", columns: [{ columnName: "Status", dataType: "String", columnType: null }, { columnName: "Message", dataType: "String", columnType: null }, { columnName: "Data.Name", dataType: "String", columnType: null }, { columnName: "Data.Value", dataType: "String", columnType: null }, { columnName: "Expanded", dataType: "String", columnType: null }, { columnName: "Solutions", dataType: "String", columnType: null }], rows: [["Critical", "Your app failed immediately", "Observation", "Your app failed to start almost immediately.", "False", "null"], ["Critical", "Your app failed immediately", "Possible reason", "Your Docker image may not exist.", "False", "null"], ["Critical", "Your app failed immediately", "Error message", "docker container could not be started: naturins-linux_1", "False", "null"], ["Critical", "Your app failed immediately", "Suggestion", "Please check the repository name, image name, and container definitions.", "False", "null"]] }, renderingProperties: { type: 7, title: null, description: null } }, { table: { tableName: "", columns: [{ columnName: "Status", dataType: "String", columnType: null }, { columnName: "Message", dataType: "String", columnType: null }, { columnName: "Data.Name", dataType: "String", columnType: null }, { columnName: "Data.Value", dataType: "String", columnType: null }, { columnName: "Expanded", dataType: "String", columnType: null }, { columnName: "Solutions", dataType: "String", columnType: null }], rows: [["Info", "Get full Docker logs", "Full Docker logs can be found from: ", "<a href=\"https://naturins-linux.scm.azurewebsites.net/api/logs/docker\" target=\"_blank\">Get JSON with Docker log links</a> ", "False", "null"]] }, renderingProperties: { type: 7, title: null, description: null } }, { table: { tableName: "", columns: [{ columnName: "Time", dataType: "DateTime", columnType: null }, { columnName: "Instance", dataType: "String", columnType: null }, { columnName: "Facility", dataType: "String", columnType: null }, { columnName: "FailureCount", dataType: "Int64", columnType: null }], rows: [["2019-07-26T20:40:00", "467983_Small_90", "naturins-linux", 1]] }, renderingProperties: { defaultValue: 0, graphType: 1, graphOptions: null, timestampColumnName: null, roleInstanceColumnName: null, seriesColumns: null, type: 2, title: "Number of app Start Failures", description: null } }, { table: { tableName: "", columns: [{ columnName: "Time", dataType: "DateTime", columnType: null }, { columnName: "Instance", dataType: "String", columnType: null }, { columnName: "Facility", dataType: "String", columnType: null }, { columnName: "Message", dataType: "String", columnType: null }, { columnName: "FailureCount", dataType: "Int64", columnType: null }], rows: [["2019-07-26T20:40:00", "467983_Small_90", "naturins-linux", "docker container could not be started: naturins-linux_1", 1]] }, renderingProperties: { displayColumnNames: null, groupByColumnName: null, type: 1, title: null, description: null } }], status: { message: null, statusId: 0 }, dataProvidersMetadata: null, suggestedUtterances: null } };
const vsCodeIntegration: string = 'Latest time seen by detector. To be used in VSCode integration.';
suite('Detector Dataset Parser', () => {
    test('Find table by column name', async () => {
        const table: detectorTable | undefined = findTableByColumnName(detectorDataset.properties.dataset, ColumnName.failureCount);
        assert.equal(table, detectorDataset.properties.dataset[4].table);
    });

    test('Find table by row value', async () => {
        const table: detectorTable | undefined = findTableByRowValue(detectorDataset.properties.dataset, vsCodeIntegration);
        assert.equal(table, detectorDataset.properties.dataset[1].table);
    });

    test('Get values by column name', async () => {
        const timestamp: string = "7/26/2019 8:40:00 PM UTC ";
        const table: detectorTable | undefined = findTableByRowValue(detectorDataset.properties.dataset, vsCodeIntegration);
        assert.ok(table);
        const values: string[] = getValuesByColumnName(nonNullValue(table), ColumnName.value);
        assert.equal(values[0], timestamp);
    });
});
